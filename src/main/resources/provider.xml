<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="dubboProvider"  />

    <!-- 使用multicast广播注册中心暴露服务地址 -->
    <dubbo:registry address="zookeeper://127.0.0.1:2181" />

    <!--<dubbo:registry protocol="zookeeper" address="127.0.0.1:2181" client="zkclient" />-->

    <!--
    Dispatcher

    all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
    direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。
    message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
    execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
    connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。

    ThreadPool

    fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
    cached 缓存线程池，空闲一分钟自动删除，需要时重建。
    limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。
    eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)
    -->
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="20880" dispatcher="all" threadpool="fixed"  threads="5"/>
    <!--多协议配置-->
    <!--<dubbo:protocol name="hessian" port="8080" />-->
    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="com.sunyard.spring_dubbo.service.api.UserServiceBo" ref="userService" version="1.0.0"/>

    <dubbo:service interface="com.sunyard.spring_dubbo.service.api.UserServiceBo" ref="userService2" version="2.0.0"/>
    <!-- 和本地bean一样实现服务 -->
    <bean id="userService" class="com.sunyard.spring_dubbo.service.impl.UserServiceImpl" />
    <bean id="userService2" class="com.sunyard.spring_dubbo.service.impl.UserServiceImpl2" />

    <!--回调服务-->
    <bean id="callbackService" class="com.sunyard.spring_dubbo.service.impl.CallbackServiceImpl" />
    <dubbo:service interface="com.sunyard.spring_dubbo.service.api.CallbackService" ref="callbackService" connections="1" callbacks="1000">
        <dubbo:method name="addListener">
            <dubbo:argument index="1" callback="true" />
            <!--也可以通过指定类型的方式-->
            <!--<dubbo:argument type="com.demo.CallbackListener" callback="true" />-->
        </dubbo:method>
    </dubbo:service>
</beans>